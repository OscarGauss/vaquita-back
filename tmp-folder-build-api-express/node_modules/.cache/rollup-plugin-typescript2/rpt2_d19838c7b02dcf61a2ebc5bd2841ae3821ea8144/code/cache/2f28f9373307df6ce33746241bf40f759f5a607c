{"code":"import apiV1GroupRouter from 'app/group/route';\nimport apiV1Router from 'app/route';\nimport { NODE_ENV, ORIGINS, VERSION } from 'config/settings';\nimport { logApiLambdaHandler, shouldDisplayLog } from 'helpers';\nimport createAPI from 'lambda-api';\nimport { errorLoggerHandler, failSafeHandler, loggerAllRequestHandler, loggerRequestTimeHandler, notFoundResponse, responsesMiddleware, setCompany, } from 'middlewares';\nimport { dbClient } from 'services';\nimport { log, logService } from 'services/log';\nimport { LogLevel } from 'types';\nconst runtimeId = process.env.AWS_LAMBDA_LOG_STREAM_NAME?.split(']').pop() || '-';\nlogService.setHeader(`API express lambda Vaquita (${runtimeId})`);\nconst upDate = new Date();\nlog(LogLevel.INFO)(`API express lambda Vaquita starting at: ${upDate.toLocaleDateString()} ${upDate.toLocaleTimeString()}`);\nconst api = createAPI({ version: 'v2.0', base: 'v2/vaquita' });\nlog(LogLevel.INFO)('starting initial express set up', { NODE_ENV, VERSION, ORIGINS });\nif (shouldDisplayLog(LogLevel.DEBUG)) {\n    api.use(loggerAllRequestHandler);\n}\nelse if (shouldDisplayLog(LogLevel.INFO)) {\n    api.use(loggerRequestTimeHandler);\n}\napi.use(responsesMiddleware);\nlog(LogLevel.INFO)('completed express set up');\nlog(LogLevel.INFO)('starting finish express set up');\napi.use(errorLoggerHandler);\napi.use(failSafeHandler);\nlog(LogLevel.INFO)('completed finish express set up');\napi.use(apiV1Router, { prefix: '/' });\napi.use(setCompany(), apiV1GroupRouter, { prefix: '/group' });\napi.use(notFoundResponse);\nif (shouldDisplayLog(LogLevel.DEBUG)) {\n    api.routes(true);\n}\nlog(LogLevel.INFO)('completed finish express set up');\nvoid dbClient.connect();\nexport const handler = async (event, context) => {\n    return await logApiLambdaHandler(event, context, 'api express lambda vaquita', upDate, async () => {\n        return await api.run(event, context);\n    });\n};\nexports.handler = handler;\n","references":["/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/app/group/route.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/app/route.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/node_modules/@types/aws-lambda/index.d.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/config/settings.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/helpers/index.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/node_modules/lambda-api/index.d.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/middlewares/index.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/services/index.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/services/log/index.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/types/index.ts"]}
