{"code":"import { classToPlain, plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { DEFAULT_PAGE, DEFAULT_SIZE, ERROR } from 'config/constants';\nimport { ErrorCode, JkError, LogLevel } from 'types';\nimport { log, toJkError } from './commons';\nexport const validatePaginated = (req) => {\n    const { pageSize: _size = DEFAULT_SIZE, page: _page = DEFAULT_PAGE } = req.query;\n    const size = +_size;\n    const page = +_page;\n    if (Number.isNaN(page)) {\n        throw new JkError(ErrorCode.ERR400, { message: 'invalid page query param' });\n    }\n    if (Number.isNaN(size)) {\n        throw new JkError(ErrorCode.ERR400, { message: 'invalid size query param' });\n    }\n    return { size, page };\n};\nexport const safeResponse = (callback) => async (req, res, next) => {\n    try {\n        await callback(req, res, next);\n    }\n    catch (error) {\n        log(LogLevel.ERROR)('safeResponse', { error });\n        return res.sendError(toJkError(error));\n    }\n};\nconst getErrors = (errors) => {\n    const allErrors = [];\n    errors.forEach(error => {\n        const errors = getErrors(error.children || []);\n        if (error.constraints) {\n            allErrors.push(error);\n        }\n        allErrors.push(...errors);\n    });\n    return allErrors;\n};\nexport const validPayloadErrors = (errors, response) => {\n    const jkErrors = getErrors(errors)\n        .map(error => new JkError(ErrorCode.ERR400, { message: Object.values(error.constraints || {}).join(',') }));\n    if (jkErrors.length) {\n        response.sendError(jkErrors[0], { notify: false, message: ERROR[ErrorCode.ERR400].message }, ...jkErrors.splice(1));\n        throw new JkError(ErrorCode.ERR400);\n    }\n};\nexport const getValidPayload = async (req, res, cls) => {\n    const payload = plainToClass(cls, req.body, { excludeExtraneousValues: true, exposeUnsetFields: false });\n    validPayloadErrors(await validate(payload), res);\n    return classToPlain(payload);\n};\nexport const sortToSortResponse = (sort) => {\n    const sortResponse = [];\n    Object.entries(sort).forEach(([key, value]) => {\n        sortResponse.push({ [key]: value });\n    });\n    return sortResponse;\n};\n","references":["/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/node_modules/class-transformer/types/index.d.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/node_modules/class-validator/types/index.d.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/config/constants.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/types/index.ts","/Users/oscargauss/Documents/projects/Vaquinha/vaquina-back/tmp-folder-build-api-express/src/helpers/commons.ts"]}
